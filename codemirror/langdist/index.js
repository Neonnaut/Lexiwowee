import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "nQYQPOOOOQO'#Cj'#CjOOQO'#Cf'#CfQYQPOOOOQO-E6d-E6d",
  stateData: "|~O]OSPOS~ORPOSPOTPOUPOVPOWPOXPO~OVWTUXSR]PX~",
  goto: "j_PPPPPPPPPP`PPPfQRORSRTQOR",
  nodeNames: "âš  LineComment Program Number Operator Directive DirectiveKeyword Filter Name RegExp",
  maxTerm: 14,
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "1]~RpXY#VYZ#V]^#Vpq#Vst#htu$Puv$Uxy$Pyz$Pz{$P{|$P!O!P$a!Q![$r![!]%Q!]!^%Q!_!`%Q!`!a%Q!a!b$P!}#O$P#O#P$P#P#Q$P#Q#R$P#V#W%V#Y#Z)V#`#a){#b#c*k#f#g+`#g#h-Z#k#l0j#o#p$P#p#q$P#q#r$P~#[S]~XY#VYZ#V]^#Vpq#V~#mSP~OY#hZ;'S#h;'S;=`#y<%lO#h~#|P;=`<%l#h~$UOX~~$XPpq$[~$aOV~~$dP!Q![$g~$lQR~!Q![$g#R#S$g~$wRR~!O!P$g!Q![$r#R#S$r~%VOS~~%YQ#T#U%`#c#d&s~%cP#h#i%f~%iP#X#Y%l~%oP#Z#[%r~%uP#c#d%x~%{P#f#g&O~&RP#]#^&U~&XP#X#Y&[~&_P#g#h&b~&eP![!]&h~&kPpq&n~&sOT~~&vP#f#g&y~&|P#c#d'P~'SP#b#c'V~'YP#T#U']~'`P#`#a'c~'fP}!O'i~'lP#a#b'o~'rP#X#Y'u~'xP#h#i'{~(OP#T#U(R~(UP#h#i(X~([P#[#](_~(bP#X#Y(e~(hP#g#h(k~(nP#]#^(q~(tP#g#h(w~(zQYZ)Qpq)Q~)VOU~~)YP#]#^)]~)`P#`#a)c~)fP#h#i)i~)lP#X#Y)o~)rP#f#g)u~)xP![!]$U~*OP#X#Y*R~*UP#h#i*X~*[P#h#i*_~*bP#X#Y*e~*hP#f#g&[~*nP#T#U*q~*tP#a#b*w~*zP#X#Y*}~+QP![!]+T~+WPpq+Z~+`OW~~+cQ#T#U+i#X#Y,q~+lP#b#c+o~+rP#W#X+u~+xP#c#d+{~,OP#a#b,R~,UP}!O,X~,[P#f#g,_~,bP#T#U,e~,hP#h#i,k~,nP#X#Y&b~,tP#^#_,w~,zP#X#Y,}~-QP#V#W-T~-WP#h#i)u~-^P#h#i-a~-dP#W#X-g~-jP}!O-m~-pQ#T#U-v#]#^/[~-yP#g#h-|~.PP#g#h.S~.VP#]#^.Y~.]P#a#b.`~.cP#]#^.f~.iP#`#a.l~.oP#T#U.r~.uP#h#i.x~.{P#]#^/O~/RP#c#d/U~/XP#b#c(q~/_P#d#e/b~/eP#T#U/h~/kP}!O/n~/qP#Y#Z/t~/wP#X#Y/z~/}P#T#U0Q~0TP#h#i0W~0ZP#i#j0^~0aP#f#g0d~0gP#X#Y(q~0mQ#]#^0s#c#d1P~0vP#h#i0y~0|P#[#]&b~1SP#f#g1V~1YP#W#X&[",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 33
});

const lexiferLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ")", align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            styleTags({
                LineComment: tags.lineComment,
                Name: tags.name,
                Number: tags.number,
                Operator: tags.operator,
                Directive: tags.className,
                DirectiveKeyword: tags.keyword,
                Filter: tags.modifier,
                RegExp: tags.regexp
            })
        ]
    }),
    languageData: {
        commentTokens: { line: "#" }
    }
});
function lexifer() {
    return new LanguageSupport(lexiferLanguage);
}

export { lexifer, lexiferLanguage };
